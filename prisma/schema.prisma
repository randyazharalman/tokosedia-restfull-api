// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Full Prisma schema with optimized indexes, relations, enums, and comments

// Enums
enum UserRole {
  USER
  ADMIN
}

enum TransactionStatus {
  pending
  paid
  cancelled
  shipped
  delivered
}

// Models
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique 
  username  String @unique
  name      String
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token String? 

  addresses    Address[]
  cart         Cart?
  transactions Transaction[]
  reviews      Review[]
  wishlist     Wishlist?
  activityLogs ActivityLog[]

  @@index([createdAt])
  @@map("users")
}

model Address {
  id         Int    @id @default(autoincrement())
  userId     Int
  label      String
  address    String
  city       String
  postalCode String
  country    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("addresses")
}

model Product {
  id                   Int      @id @default(autoincrement())
  title                String
  description          String
  brand                String
  color                String[]
  stock                Int
  weight               Float
  size                 String[]
  tags                 String[]
  sku                  String   @unique
  thumbnail            String
  rating               Float    @default(0)
  discountPercentage   Float    @default(0)
  availabilityStatus   String
  images               String[]
  price                Float
  shippingInformation  String
  returnPolicy         String
  warrantyInformation  String
  minimumOrderQuantity Int
  categoryId           Int?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  category         Category?         @relation(fields: [categoryId], references: [id])
  reviews          Review[]
  cartItems        CartItem[]
  transactionItems TransactionItem[]
  Wishlist         Wishlist?         @relation(fields: [wishlistId], references: [id])
  wishlistId       Int?

  @@index([title])
  @@index([price])
  @@index([categoryId])
  @@index([createdAt])
  @@map("products")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Review {
  id            Int      @id @default(autoincrement())
  reviewerName  String
  reviewerEmail String
  comment       String
  rating        Int
  date          DateTime
  productId     Int
  userId        Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
  @@index([productId])
  @@map("reviews")
}

model Cart {
  id     Int @id @default(autoincrement())
  userId Int @unique
  

  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        Int @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@index([cartId])
  @@map("cart_items")
}

model Transaction {
  id        Int               @id @default(autoincrement())
  userId    Int
  status    TransactionStatus
  total     Float
  createdAt DateTime          @default(now())
  updatedAt DateTime @updatedAt

  user     User              @relation(fields: [userId], references: [id])
  items    TransactionItem[]
  shipping Shipping?
  payment  Payment?

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("transactions")
}

model TransactionItem {
  id              Int   @id @default(autoincrement())
  transactionId   Int
  productId       Int
  quantity        Int
  priceAtPurchase Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transaction Transaction @relation(fields: [transactionId], references: [id])
  product     Product     @relation(fields: [productId], references: [id])

  @@unique([transactionId, productId])
  @@index([transactionId])
  @@map("transaction_items")
}

model Shipping {
  id            Int       @id @default(autoincrement())
  transactionId Int       @unique
  trackingCode  String    @unique
  address       String
  courier       String
  shippedAt     DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@index([trackingCode])
  @@map("shipping")
}

model Payment {
  id            Int       @id @default(autoincrement())
  transactionId Int       @unique
  method        String
  paidAt        DateTime?
  amount        Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@index([transactionId])
  @@map("payments")
}

model Wishlist {
  id     Int       @id @default(autoincrement())
  userId Int       @unique
  items  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("wishlists")
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@map("activity_logs")
}
